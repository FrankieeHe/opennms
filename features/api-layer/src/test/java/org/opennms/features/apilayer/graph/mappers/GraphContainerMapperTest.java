/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2019 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.features.apilayer.graph.mappers;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

import org.junit.Test;
import org.mapstruct.factory.Mappers;
import org.opennms.integration.api.v1.graph.beans.ImmutableEdge;
import org.opennms.integration.api.v1.graph.beans.ImmutableGraph;
import org.opennms.integration.api.v1.graph.beans.ImmutableGraphContainer;
import org.opennms.integration.api.v1.graph.beans.ImmutableGraphContainerInfo;
import org.opennms.integration.api.v1.graph.beans.ImmutableVertex;
import org.opennms.integration.api.v1.graph.beans.ImmutableVertexRef;
import org.opennms.netmgt.graph.api.GraphContainer;
import org.opennms.netmgt.graph.api.generic.GenericEdge;
import org.opennms.netmgt.graph.api.generic.GenericGraph;
import org.opennms.netmgt.graph.api.generic.GenericGraphContainer;
import org.opennms.netmgt.graph.api.generic.GenericProperties;
import org.opennms.netmgt.graph.api.generic.GenericVertex;
import org.opennms.netmgt.graph.api.info.DefaultGraphContainerInfo;
import org.opennms.netmgt.graph.api.info.GraphContainerInfo;

public class GraphContainerMapperTest {
    private final GraphContainerMapper mapper = Mappers.getMapper(GraphContainerMapper.class);

    @Test
    public void canMapEmptyContainerFromApiToOnms() {
        GenericGraphContainer onmsGraphContainer = new GenericGraphContainer();
        onmsGraphContainer.setId("1");

        ImmutableGraphContainer apiGraphContainer = ImmutableGraphContainer.builder()
                .id("1")
                .build();

        mapAndVerify(onmsGraphContainer, apiGraphContainer);
    }

    @Test
    public void canMapContainerFromApiToOnms() {
        GenericGraphContainer onmsGraphContainer = new GenericGraphContainer();
        onmsGraphContainer.setId("container-id");

        GenericGraph graph = new GenericGraph();
        graph.setProperty(GenericProperties.NAMESPACE, "graph-ns");
        onmsGraphContainer.addGraph(graph);

        GenericVertex v1 = new GenericVertex("graph-ns", "vertex-id-1");
        graph.addVertex(v1);
        GenericVertex v2 = new GenericVertex("graph-ns", "vertex-id-2");
        graph.addVertex(v2);

        GenericEdge e1 = new GenericEdge(v1, v2);
        graph.addEdge(e1);

        ImmutableVertex apiV1 = ImmutableVertex.builder()
                .namespace("graph-ns")
                .id("vertex-id-1")
                .build();
        ImmutableVertex apiV2 = ImmutableVertex.builder()
                .namespace("graph-ns")
                .id("vertex-id-2")
                .build();
        ImmutableGraphContainer apiGraphContainer = ImmutableGraphContainer.builder()
                .id("container-id")
                .graph(ImmutableGraph.builder()
                        .namespace("graph-ns")
                        .vertex(apiV1)
                        .vertex(apiV2)
                        .edge(ImmutableEdge.builder()
                                .namespace("graph-ns")
                                // Match the ID generated by the org.opennms.netmgt.graph.api.AbstractEdge
                                .id(apiV1.getId() + "->" + apiV2.getId())
                                .source(ImmutableVertexRef.builder()
                                        .id(apiV1.getId())
                                        .namespace(apiV1.getNamespace())
                                        .build())
                                .target(ImmutableVertexRef.builder()
                                        .id(apiV2.getId())
                                        .namespace(apiV2.getNamespace())
                                        .build())
                                .build())
                        .build())
                .build();

        mapAndVerify(onmsGraphContainer, apiGraphContainer);
    }

    @Test
    public void canMapEmptyContainerInfoFromApiToOnms() {
        DefaultGraphContainerInfo onmsGraphContainerInfo = new DefaultGraphContainerInfo("1");
        ImmutableGraphContainerInfo apiGraphContainerInfo = ImmutableGraphContainerInfo.builder()
                .id("1")
                .build();

        mapAndVerify(onmsGraphContainerInfo, apiGraphContainerInfo);
    }

    private void mapAndVerify(GraphContainerInfo onmsGraphContainerInfo, org.opennms.integration.api.v1.graph.GraphContainerInfo apiGraphContainerInfo) {
        // From ONMS to API
        ImmutableGraphContainerInfo mappedApiGraphContainerInfo = mapper.map(onmsGraphContainerInfo);
        assertThat(mappedApiGraphContainerInfo, equalTo(apiGraphContainerInfo));
        // From API to ONMS
        DefaultGraphContainerInfo mappeOnmsGraphContainerInfo = mapper.map(apiGraphContainerInfo);
        assertThat(mappeOnmsGraphContainerInfo, equalTo(onmsGraphContainerInfo));
    }

    private void mapAndVerify(GenericGraphContainer onmsGraphContainer, org.opennms.integration.api.v1.graph.GraphContainer apiGraphContainer) {
        // From ONMS to API
        ImmutableGraphContainer mappedApiGraphContainer = mapper.map(onmsGraphContainer);
        assertThat(mappedApiGraphContainer, equalTo(apiGraphContainer));
        // From API to ONMS
        GraphContainer mappeOnmsGraphContainer = mapper.map(apiGraphContainer);
        assertThat(mappeOnmsGraphContainer, equalTo(onmsGraphContainer));
    }



}
